# Cursor Rules Configuration

# 환경 변수 파일 편집 허용
allow_env_files = true

# 편집 가능한 파일 패턴
editable_patterns = [
  "*.env*",
  ".env*",
  "server/.env*",
  "client/.env*"
]

# 보안 주의사항
# - 환경 변수 파일을 편집할 때는 민감한 정보 노출에 주의하세요
# - 프로덕션 환경 변수는 별도로 안전하게 관리하세요
# - Git에 커밋하기 전에 민감한 정보가 포함되지 않았는지 확인하세요

# HotsTinder 프로젝트 커서 규칙 (2025-05-30 업데이트)

## 🎯 프로젝트 개요
Heroes of the Storm 매치메이킹 및 리플레이 분석 플랫폼
- **Frontend**: React 18 + Vite + TailwindCSS + Zustand
- **Backend**: Node.js + Express + PostgreSQL + Sequelize ORM
- **Authentication**: JWT + Battle.net OAuth
- **Real-time**: Socket.IO + Redis 캐시
- **Deployment**: Vercel (Frontend + Serverless API)
- **Language**: 한국어 (Korean) - 모든 응답은 한국어로

## 📁 프로젝트 구조
```
hotstinder/
├── client/                 # React 프론트엔드
│   ├── src/
│   │   ├── components/     # 재사용 가능한 컴포넌트
│   │   ├── pages/         # 페이지 컴포넌트
│   │   ├── stores/        # Zustand 상태 관리
│   │   ├── services/      # API 및 Socket 서비스
│   │   └── utils/         # 유틸리티 함수
├── server/                # Node.js 백엔드 (개발용)
│   ├── src/
│   │   ├── routes/        # API 라우트
│   │   ├── models/        # Sequelize 모델
│   │   ├── services/      # 비즈니스 로직 서비스
│   │   ├── utils/         # 백엔드 유틸리티
│   │   └── middleware/    # 미들웨어
├── api/                   # Vercel 서버리스 함수 (배포용)
│   ├── auth/             # 인증 관련 API
│   ├── matchmaking.js    # 매치메이킹 API
│   ├── users.js          # 사용자 관리 API
│   └── matches.js        # 매치 관리 API
└── prisma/               # 데이터베이스 스키마 (참고용)
```

## 🛠️ 기술 스택 및 코딩 규칙

### Frontend (React)
- **상태 관리**: Zustand 사용 (Redux 대신)
- **스타일링**: TailwindCSS 클래스 우선 사용
- **라우팅**: React Router v6
- **HTTP 클라이언트**: Axios
- **실시간 통신**: Socket.IO Client
- **알림**: react-toastify
- **컴포넌트 구조**:
  ```jsx
  // 함수형 컴포넌트 + hooks 패턴
  const ComponentName = () => {
    // hooks 먼저
    const [state, setState] = useState();
    const navigate = useNavigate();
    const { user, isAuthenticated } = useAuthStore();

    // 함수들
    const handleFunction = () => {};

    // 렌더링
    return <div className="tailwind-classes">...</div>;
  };
  ```

### Backend (Node.js)
- **ORM**: Sequelize (PostgreSQL)
- **인증**: JWT + bcrypt + Battle.net OAuth
- **실시간**: Socket.IO 서버
- **캐싱**: Redis (폴백: 메모리 캐시)
- **로깅**: Winston 기반 커스텀 로거
- **API 구조**: RESTful + Express Router
- **에러 처리**: try-catch + 상세 로깅
- **라우트 패턴**:
  ```javascript
  router.method('/path', authenticate, middleware, async (req, res) => {
    try {
      // 로직
      logger.info('작업 설명', { 데이터 });
      res.json({ success: true, data });
    } catch (err) {
      logger.error('에러 설명', err);
      res.status(500).json({ message: '에러 메시지' });
    }
  });
  ```

### 데이터베이스 (PostgreSQL + Sequelize)
- **Primary DB**: PostgreSQL (Sequelize ORM)
- **Models**: User, Match, MatchParticipant, UserLog, MatchmakingQueue
- **관계**: 1:N, N:M 관계 적절히 설정
- **필드명**: camelCase (JS) ↔ snake_case (DB) 매핑
- **타입 안전성**: DataTypes 명시적 사용

## 🎮 도메인 특화 규칙

### Heroes of the Storm 관련
- **영웅 이름**: 정확한 영문명 사용 (예: Li-Ming, Sgt. Hammer)
- **맵 이름**: 한글명 우선, 영문명 병기
- **게임 용어**:
  - MMR (Matchmaking Rating)
  - KDA (Kill/Death/Assist)
  - 영웅 피해량, 공성 피해량, 힐량, 경험치 기여도
- **팀 구분**: blue(0), red(1) 숫자 코드 사용
- **전장 목록**: 11개 전장 (용의 둥지, 저주받은 골짜기, 공포의 정원, 하늘사원, 거미 여왕의 무덤, 영원의 전쟁터, 불지옥 신단, 파멸의 탑, 브락식스 항전, 볼스카야 공장, 알터랙 고개)

### 매치메이킹 로직
- **밸런싱**: MMR 기반 팀 구성
- **대기열**: FIFO + MMR 범위 고려
- **시뮬레이션**: 테스트용 가상 매치 지원
- **실시간 알림**: WebSocket 기반 상태 업데이트

## 🔧 개발 가이드라인

### 코드 품질
1. **에러 처리**: 모든 async 함수에 try-catch
2. **로깅**: 중요한 작업마다 상세 로그
3. **검증**: 입력값 검증 및 sanitization
4. **보안**: SQL injection, XSS 방지
5. **성능**: 불필요한 DB 쿼리 최소화

### API 설계
- **RESTful**: 명확한 HTTP 메서드 사용
- **응답 형식**: `{ success: boolean, data?: any, message?: string }`
- **에러 코드**: 적절한 HTTP 상태 코드
- **페이지네이션**: page, limit, total 포함
- **필터링**: query parameter 활용

## 🌐 API 연동성 및 엔드포인트 규칙

### 엔드포인트 명명 규칙
```javascript
// ✅ 올바른 패턴
GET    /api/users              // 사용자 목록
GET    /api/users/:id          // 특정 사용자
POST   /api/users              // 사용자 생성
PUT    /api/users/:id          // 사용자 전체 수정
PATCH  /api/users/:id          // 사용자 부분 수정
DELETE /api/users/:id          // 사용자 삭제

// 관리자 전용 엔드포인트
GET    /api/admin/users        // 관리자용 사용자 목록
POST   /api/admin/users/ban    // 사용자 차단
DELETE /api/admin/matches      // 매치 삭제

// 매치메이킹 관련
POST   /api/matchmaking/join   // 대기열 참가
DELETE /api/matchmaking/leave  // 대기열 탈퇴
GET    /api/matchmaking/status // 대기열 상태
POST   /api/matchmaking/simulate // 시뮬레이션 매치

// 인증 관련
GET    /api/auth/me            // 현재 사용자 정보
POST   /api/auth/admin-login   // 관리자 로그인
GET    /api/auth/dashboard     // 관리자 대시보드
GET    /api/auth/bnet/callback // Battle.net 콜백
```

### 클라이언트-서버 데이터 호환성
```javascript
// 서버 응답 표준 형식
{
  success: boolean,           // 성공/실패 여부
  data?: any,                // 실제 데이터
  message?: string,          // 사용자 메시지
  error?: string,            // 에러 메시지
  pagination?: {             // 페이지네이션 정보
    page: number,
    limit: number,
    total: number,
    totalPages: number
  }
}

// 클라이언트 요청 표준 형식
{
  // 헤더에 항상 포함
  'Authorization': `Bearer ${token}`,
  'Content-Type': 'application/json'
}
```

### 데이터베이스-API 필드 매핑
```javascript
// Sequelize 모델 ↔ API 응답 매핑
// User 모델
DB: user_id        → API: id, userId
DB: battle_tag     → API: battleTag
DB: created_at     → API: createdAt
DB: updated_at     → API: updatedAt
DB: last_login_at  → API: lastLoginAt

// Match 모델
DB: match_id       → API: id, matchId
DB: map_name       → API: mapName, map
DB: game_mode      → API: gameMode
DB: game_duration  → API: gameDuration, gameLength
DB: created_at     → API: createdAt

// MatchParticipant 모델
DB: participant_id → API: id
DB: user_id        → API: userId
DB: hero_damage    → API: heroDamage
DB: siege_damage   → API: siegeDamage
DB: mmr_change     → API: mmrChange
```

## 🚀 배포 및 환경

### 환경 변수
- **개발**: `.env.local`, `.env.development`
- **프로덕션**: Vercel 환경 변수
- **보안**: 민감 정보는 환경 변수로만

### Vercel 배포 제약사항
- **WebSocket 미지원**: Vercel 서버리스 함수는 WebSocket 연결을 지원하지 않음
- **대안**: 개발 환경에서는 로컬 서버 사용, 프로덕션에서는 폴링 방식 고려
- **Redis**: Vercel에서 Redis 연결 실패 시 메모리 캐시로 폴백

### 데이터베이스 일관성
- **모든 API 파일**: PostgreSQL + Sequelize 사용
- **서버 코드**: PostgreSQL + Sequelize 사용
- **MongoDB 제거**: 모든 MongoDB 관련 코드 제거 완료

## 📋 일관성 유지 규칙

### 대화 연속성
1. **컨텍스트 유지**: 이전 대화 내용 참조하여 일관된 답변
2. **프로젝트 이해**: 기술 스택과 구조를 항상 고려
3. **한국어 응답**: 모든 설명과 코멘트는 한국어로
4. **실용적 접근**: 이론보다는 실제 구현 가능한 솔루션 제시

### 코드 수정 시
1. **기존 패턴 유지**: 프로젝트의 기존 코딩 스타일 준수
2. **점진적 개선**: 대규모 리팩토링보다는 점진적 개선
3. **호환성 고려**: 기존 기능 영향 최소화
4. **테스트 가능**: 수정 후 테스트 가능한 형태로 제공

## 🎯 특별 지침

### 관리자 기능
- **권한 검증**: 모든 관리자 API에 인증/인가 확인
- **로그 기록**: 관리자 작업은 상세 로그 남기기
- **UI 분리**: 일반 사용자와 관리자 UI 명확히 구분
- **메뉴 숨김**: 관리자 로그인 시 대시보드와 프로필 메뉴 숨김

### 실시간 기능
- **WebSocket**: Socket.IO 기반 실시간 통신
- **대기열 상태**: 전역 상태로 모든 페이지에서 표시
- **자동 연결**: 로그인 시 자동 WebSocket 연결
- **재연결**: 연결 끊김 시 자동 재연결

### UI/UX 패턴
- **다크 테마**: slate 계열 색상 기본
- **반응형**: 모바일 우선 설계
- **로딩 상태**: 스피너 및 스켈레톤 UI
- **에러 표시**: toast 알림 + 인라인 메시지
- **전장 목록**: 3열 그리드 레이아웃
- **대기열 상태창**: 그라데이션 배경 + 호버 효과

### TailwindCSS 클래스 표준화
```css
/* 공통 컴포넌트 클래스 */
.btn-primary: "bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded transition"
.btn-secondary: "bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded transition"
.btn-danger: "bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded transition"
.btn-success: "bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition"

/* 카드 컴포넌트 */
.card: "bg-slate-800 rounded-lg p-6 shadow-lg"
.card-header: "border-b border-slate-700 pb-4 mb-4"
.card-title: "text-xl font-bold text-white"

/* 폼 요소 */
.form-input: "bg-slate-700 border border-slate-600 text-white px-3 py-2 rounded focus:outline-none focus:border-blue-500"
.form-label: "block text-sm font-medium text-gray-300 mb-2"
.form-error: "text-red-400 text-sm mt-1"

/* 테이블 */
.table-container: "overflow-x-auto bg-slate-800 rounded-lg"
.table-header: "bg-slate-700 text-gray-300 text-left px-4 py-3"
.table-cell: "px-4 py-3 border-b border-slate-700"

/* 대기열 상태창 */
.queue-status: "fixed bottom-4 right-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-lg shadow-lg"
.queue-stats-card: "bg-gradient-to-br from-slate-700/30 to-slate-600/20 p-6 rounded-lg hover:scale-105 transition-transform"
```

## 🔍 디버깅 및 문제 해결 가이드

### 일반적인 문제 패턴
1. **PostgreSQL 타입 불일치**:
   - 문제: `operator does not exist: character varying = integer`
   - 해결: 데이터 타입 확인 후 적절한 변환 적용
   - 예시: `bnet_id`를 문자열로 처리

2. **Battle.net OAuth 오류**:
   - 콜백 URL 확인: `https://hotstinder.vercel.app/api/auth/bnet/callback`
   - 환경 변수 검증: `BNET_CLIENT_ID`, `BNET_CLIENT_SECRET`
   - 리디렉션 URI 매칭 확인

3. **승리팀 표시 문제**:
   - 다양한 winner 값 형태 처리: `'red'`, `'blue'`, `0`, `1`, `'0'`, `'1'`
   - 클라이언트-서버 데이터 일관성 확인

4. **NaN:NaN 시간 표시 문제**:
   - formatTime 함수에서 NaN, undefined, null 체크
   - 기본값 '00:00' 반환

### 성능 최적화
- **DB 쿼리**: include/attributes로 필요한 데이터만 조회
- **페이지네이션**: 대용량 데이터 처리 시 필수
- **캐싱**: Redis 기반 캐싱 (폴백: 메모리 캐시)
- **WebSocket**: 불필요한 이벤트 최소화

## 📝 최근 주요 업데이트 (2025-05-30)

### 1. 데이터베이스 통일
- **MongoDB → PostgreSQL**: 모든 API 파일을 PostgreSQL + Sequelize로 변경
- **일관성 확보**: 서버 코드와 Vercel API 완전 통일
- **타입 안전성**: DataTypes 명시적 사용

### 2. UI/UX 개선
- **전장 로테이션 → 전장 목록**: 11개 전장을 3열 그리드로 표시
- **대기열 상태창**: 그라데이션 배경 + 호버 효과 + 전역 표시
- **관리자 메뉴**: 관리자 로그인 시 대시보드/프로필 메뉴 숨김

### 3. 실시간 기능 강화
- **WebSocket 서비스**: Socket.IO 기반 실시간 알림
- **Redis 캐시**: 고성능 캐싱 (폴백: 메모리 캐시)
- **매치메이킹 개선**: MMR 기반 정교한 매칭 + 배치 처리

### 4. 시스템 안정성
- **에러 처리**: 타임아웃 + 상세 로깅
- **타입 안전성**: PostgreSQL 데이터 타입 호환성 강화
- **환경 설정**: 개발/프로덕션 환경 분리

---

**중요**: 이 프로젝트는 Heroes of the Storm 커뮤니티를 위한 매치메이킹 플랫폼입니다.
게임의 특성과 사용자 경험을 항상 고려하여 개발해주세요.

**최근 업데이트 (2025-05-30)**:
- PostgreSQL + Sequelize 완전 통일
- 전장 목록 UI 개선 (3열 그리드)
- 대기열 상태창 전역 표시 및 디자인 개선
- WebSocket + Redis 실시간 시스템 구축
- 관리자 기능 UI/UX 개선
- NaN:NaN 시간 표시 문제 해결
- 매치메이킹 시스템 확장성 대폭 개선
